apiVersion: apps/v1
kind: Deployment
metadata:
  name: rl-trading-system
  namespace: rl-trading
  labels:
    app: rl-trading-system
    component: main
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: rl-trading-system
      component: main
  template:
    metadata:
      labels:
        app: rl-trading-system
        component: main
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rl-trading-system
      imagePullSecrets:
        - name: docker-registry-secret
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: rl-trading-system
        image: rl-trading-system:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        - name: tensorboard
          containerPort: 6006
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app/src"
        - name: CONFIG_PATH
          value: "/app/config/system_config.yaml"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENVIRONMENT
          value: "production"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: db_password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: redis_password
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: influxdb_token
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: api_key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: jwt_secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets
              key: encryption_key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: checkpoints-volume
          mountPath: /app/checkpoints
        - name: outputs-volume
          mountPath: /app/outputs
        - name: cache-volume
          mountPath: /app/cache
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: config-volume
        configMap:
          name: rl-trading-config
          defaultMode: 0644
      - name: data-volume
        persistentVolumeClaim:
          claimName: rl-trading-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: rl-trading-logs-pvc
      - name: checkpoints-volume
        persistentVolumeClaim:
          claimName: rl-trading-checkpoints-pvc
      - name: outputs-volume
        persistentVolumeClaim:
          claimName: rl-trading-outputs-pvc
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rl-trading-system
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rl-trading-system-dev
  namespace: rl-trading-dev
  labels:
    app: rl-trading-system
    component: main
    version: v1.0.0-dev
    environment: development
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: rl-trading-system
      component: main
      environment: development
  template:
    metadata:
      labels:
        app: rl-trading-system
        component: main
        version: v1.0.0-dev
        environment: development
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rl-trading-system
      containers:
      - name: rl-trading-system
        image: rl-trading-system:v1.0.0-dev
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        - name: tensorboard
          containerPort: 6006
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app/src"
        - name: CONFIG_PATH
          value: "/app/config/system_config.yaml"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: ENVIRONMENT
          value: "development"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets-dev
              key: db_password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets-dev
              key: redis_password
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: rl-trading-secrets-dev
              key: influxdb_token
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: rl-trading-config-dev
      - name: data-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}